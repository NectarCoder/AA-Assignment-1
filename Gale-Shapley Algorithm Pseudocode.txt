# Gale Shapley Algorithm pseudocode
#
# FUNCTION stableMatch() {
#   WHILE not all positions are stably matched {
#       FOR EACH position in list of positions {
#           GET the name of the next preferred student for the position
#           RETRIEVE the student object for that student
#           IF student is currently unmatched {
#               MATCH student to the position
#               ADD student's name to list of matches for the position
#           }
#           ELSE IF student prefers current position over current match {
#               STORE student's current match position temporarily
#               UPDATE student's match to current position
#               REMOVE student's name from list of matches for previous position
#               ADD student's name to list of matches for current position
#           }
#       }
#   }
#
#
# PYTHON CODE INCLUDED FROM Matching.py FOR REFERENCE.
# Gale Shapley Algorithm python code
#
# Method name: stableMatch
# Formal Parameters: None
# Return Value: None
# Usage: Using the Gale Algorithm, a perfect match is found between the positions available and the applications submitted
#
def stableMatch(self)->None:
    while not self.checkMatch():
        for position in self._positions:
            applicantnumber=0                                                  # used to keep track of the index of the list of preferences from the position
            while not self._data[position].full():
                studentname=self._data[position].getPreference(applicantnumber)  # pulls up the targeted applicant based on the position's preferences
                student=self._data[studentname]                                    # targeted student object data pulled from dictionary and assigned
                if student.getMatch()==None:
                    student.setMatch(position)
                    self._data[position].addMatch(student.getName())
                elif student.checkPriority(position):                          # checkPriority function called to see if the student prefers the target position
                    temp=student.getMatch()
                    student.setMatch(position)
                    self._data[temp].removeMatch(student.getName())
                    self._data[position].addMatch(student.getName())
                applicantnumber+=1